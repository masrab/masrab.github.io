head(mtcars)
with(mtcars,plot(mpg, hp))
library(knitr)
render_jekyll()
knit("first_post.Rmd")
knit("first_post.Rmd")
knit("first_post.Rmd")
knit("first_post.Rmd")
knit("first_post.Rmd")
knit("first_post.Rmd", output = "../_posts/2015-01-16-testing-it.md")
knit("nutrition.Rmd", output = "../_posts/2015-01-10-nutrition.md")
library(knitr)
render_jekyll()
knit("nutrition.Rmd", output = "../_posts/2015-01-10-nutrition.md")
knit("nutrition.Rmd", output = "../_posts/2015-01-10-nutrition.md")
knit("nutrition.Rmd", output = "../_posts/2015-01-10-nutrition.md")
library(knitr)
library(dendextend)
library(tm)
library(tidyr)
library(ggplot2)
library(d3Network)
library(dplyr)
dat <- readLines("../data/epic_recipes.txt") %>%
strsplit(split = "\t")
cuisine <- sapply(dat, function(x) x[1])
ingredients <- sapply(dat, function(x) paste(x[-1],collapse = " "))
cuisine_names <- cuisine %>% unique
names(cuisine_names) <- cuisine_names
food <- sapply(cuisine_names, function(x){
ingredients[cuisine == x] %>% paste(collapse = " ")
})
dat %>% head
readLines("../data/epic_recipes.txt") %>% head
readLines("../data/epic_recipes.txt") %>% head(2)
readLines("../data/epic_recipes.txt") %>% head(2) %>% print
readLines("../data/epic_recipes.txt") %>% head(2) %>% cat
readLines("../data/epic_recipes.txt") %>% head(1) %>% cat
readLines("../data/epic_recipes.txt") %>% head(1) %>% print
nrow(food)
food
class(food)
library(tm)
# convert text corpus to a document term matrix
food_dtm <- VectorSource(food) %>% VCorpus %>% DocumentTermMatrix
# create a data frame from the document term matrix
food_df <- data.frame(cuisine = cuisine_names, stringsAsFactors=FALSE, row.names=NULL) %>%
cbind(as.matrix(food_dtm)) %>% tbl_df
head(food_df)
head(food_df[,1:10])
library(knitr)
opts_current()
opts_current
opts_current$get("fig.width")
library(d3Network)
9*72
library(knitr)
library(dendextend)
library(dplyr)
library(dplyr)
# read each line
dat <- readLines("../data/epic_recipes.txt") %>% strsplit(split = "\t")
# extract cuisine and ingredients
cuisine <- sapply(dat, function(x) x[1])
ingredients <- sapply(dat, function(x) paste(x[-1],collapse = " "))
# for each cuisine, join together the ingredients from all the recipes
cuisine_names <- cuisine %>% unique
names(cuisine_names) <- cuisine_names
food <- sapply(cuisine_names, function(x){
ingredients[cuisine == x] %>% paste(collapse = " ")
})
library(tm)
# convert text corpus to a document term matrix
food_dtm <- VectorSource(food) %>% VCorpus %>% DocumentTermMatrix
# create a data frame from the document term matrix
food_df <- data.frame(cuisine = cuisine_names, stringsAsFactors=FALSE, row.names=NULL) %>%
cbind(as.matrix(food_dtm)) %>% tbl_df
library(tidyr)
# "wide" --> "tall"
food_tall <- food_df %>% gather("ingredient", "count", -cuisine)
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
ungroup %>% spread(cuisine, count) %>%
group_by(cuisine) %>% filter(min_rank(desc(American)) <= 10) %>% kable
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
ungroup %>% spread(cuisine, count)
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
ungroup %>% spread(cuisine, count) %>%
filter(min_rank(desc(American)) <= 10) %>% kable
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
ungroup %>% spread(cuisine, count) %>%
filter(min_rank(desc(American)) <= 10) %>% arrange(American) %>% kable
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
ungroup %>% spread(cuisine, count) %>%
filter(min_rank(desc(American)) <= 10) %>% arrange(desc(American)) %>% kable
food_tall
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
group_by(cuisine) %>% mutate(rank = min_rank(desc(count)) %>% filter(rank <= 10) %>%
ungroup %>% spread(cuisine, count) %>%
kable
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
group_by(cuisine) %>% mutate(rank = min_rank(desc(count))) %>% filter(rank <= 10) %>%
ungroup %>% spread(cuisine, count) %>%
kable
food_tall %>% filter(cuisine %in% c("American", "French")) %>%
group_by(cuisine) %>% mutate(rank = min_rank(desc(count))) %>% filter(rank <= 10) %>%
ungroup %>% spread(cuisine, count) %>% arrange(rank) %>%
kable
par("mar")
library(dendextend) # pretty dendograms
mar_orig <- par("mar")
par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2)
par(mar=mar_orig) # restore the margines
hc <- data.frame(food_df, row.names = "cuisine")
# without standardizing
hc %>% dist %>% hclust %>% plot(hang= -1, xlab = "", main="", sub="")
library(dendextend) # pretty dendograms
mar_orig <- par("mar")
par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2)
par(mar=mar_orig) # restore the margines
library(dendextend) # pretty dendograms
#
# mar_orig <- par("mar")
# par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2)
# par(mar=mar_orig) # restore the margines
library(dendextend) # pretty dendograms
#
# mar_orig <- par("mar")
# par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2, lower_rect=0)
# par(mar=mar_orig) # restore the margines
library(dendextend) # pretty dendograms
#
# mar_orig <- par("mar")
# par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2, lower_rect=0)
# par(mar=mar_orig) # restore the margines
library(dendextend) # pretty dendograms
mar_orig <- par("mar")
par(mar=c(11,5,2,2)) # set the margines
# need to standardize rows prior to calculating dissimilarity
norm_rows <- function(mat){
mat / rowSums(mat)
}
# distance matrix
d <- hc %>%
norm_rows %>%
dist
food_dend <- hclust(d) %>% as.dendrogram
num_clusters <- 4 # highlight four clusters
food_dend %>% set("branches_k_color", k = num_clusters) %>% plot(ylab="Distance")
# add bounding boxes
food_dend %>% rect.dendrogram(k=num_clusters, border = 8, lty = 5, lwd = 2, lower_rect=0)
par(mar=mar_orig) # restore the margines
# top ingredients
food_tall %>% filter(rank<=1) %>% arrange(cuisine, rank) %>% kable
food_tall %>% filter(rank<=1) %>% arrange(cuisine, rank)
food_tall
library(ggplot2)
N_top <- 10
# calculate the ranking of each ingredient for each cuisine type
food_tall <- food_tall %>% group_by(cuisine) %>%
mutate(rank = min_rank(desc(count)))
food_tall %>%
filter(rank<=N_top) %>% # top N ingredients
#   filter(rank>=.95) %>% # top N ingredients
#   mutate(ingredient = order_by(rank, as.factor(ingredients))) %>%
ggplot +
geom_point(aes(ingredient, cuisine, color = rank, size = rank)) +
scale_color_gradient(name = "Popularity", breaks=1:N_top,
low="red", high="black") +
scale_size(name = "Popularity", breaks=1:N_top, range=c(6,1)) +
guides(color = guide_legend()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5, size = 11))
food_tall %>% filter(rank<=1) %>% arrange(cuisine, rank)
recipe_count <- table(cuisine) %>% as.data.frame.table(responseName = "recipe_count")
# Number of unique ingredients
food_tall %>%
#   left_join(recipe_count, by="cuisine") %>%
#   mutate(unique_ingredients = sum(count>0)/ recipe_count ) %>%
summarise(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
mutate(cuisine = factor(cuisine,
levels = cuisine[order(rev(unique_ingredients))])) %>%
ggplot + geom_bar(aes(cuisine, unique_ingredients),
stat = "identity", fill = "gold",
color = "brown", width = .7) +
theme(axis.text.x = element_text(angle=90, vjust = .5, hjust = 1))
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = 2, color = "gold") +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = 2, color = I("gold")) +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = I(2), color = I("gold")) +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = I(4), color = I("brown")) +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = I(4), fill = I("brown")) +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = I(3), fill = I("brown")) +
scale_x_log10()
food_tall %>% left_join(recipe_count) %>%
mutate(unique_ingredients = sum(count>0) ) %>%
arrange(desc(unique_ingredients)) %>%
qplot(recipe_count, unique_ingredients, data = ., size = I(3), color = I("brown")) +
scale_x_log10()
